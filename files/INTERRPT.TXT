-------------------------------------------------
CPU exception interrupts:
0x00        Divide by 0
0x01        Single step (Debugger)
0x02        Non Maskable Interrupt (NMI) Pin
0x03        Breakpoint (Debugger)
0x04        Overflow
0x05        Bounds check
0x06        Undefined Operation Code (OPCode) instruction 
0x07        No coprocessor
0x08        Double Fault
0x09        Coprocessor Segment Overrun
0x0a        Invalid Task State Segment (TSS)
0x0b        Segment Not Present
0x0c        Stack Segment Overrun
0x0d        General Protection Fault (GPF)
0x0e        Page Fault
0x0f        Unassigned
0x10        Coprocessor error
0x11        Alignment Check (486+ Only)
0x12        Machine Check (Pentium/586+ Only)
0x13 - 0x1f Reserved exceptions
-------------------------------------------------
Hardware interrupts:
0x08        Timer 
0x09        Keyboard 
0x0a        Cascade (never raised - internal use only)
0x0b        COM 2 (if enabled)
0x0c        COM 1 (if enabled)
0x0d        LPT2 (if enabled)
0x0e        Floppy disk
0x0f        LPT1 - unreliable
0x70        CMOS rtc
0x71        Free
0x72        Free
0x73        Free
0x74        PS2 Moudse
0x75        FPU / Coprocessor
0x76        Primary Hard Disk
0x77        Secondary Hard Disk - unreliable
-------------------------------------------------
DOS compatibility interrupt (0x20): Program terminate
DOS compatibility interrupts (0x21) with function number in ah:
-------------------------------------------------
TONY interrupts:
0x80 - 0x85: timer
0x86 - 0x87: free
0x88 - 0x8b: sound
0x8c - 0x8d: com control
0x8e - 0x8f: math
0x90 - 0xa7: display
0xa8 - 0xaf: free
0xb0 - 0xb7: keyboard
0xb8 - 0xbb: memory
0xbc - 0xbf: free
0xc0 - 0xcf: file
0xd0 - 0xdf: string
0xe0 - 0xef: convert
0xf0 - 0xff: misc
-------------------------------------------------





-------------------------------------------------
0x80
	Get timer ticks (8192Hz)
	input: 
		none
	output: 
		AX -> timer ticks hi
        DX -> timer ticks lo
-------------------------------------------------
0x81
    Sleep milliseconds
    input: 
        AX -> milli seconds
    output:
        none
-------------------------------------------------
0x82
    Sleep seconds
    input: 
        AX -> seconds
    output:
        none
-------------------------------------------------






-------------------------------------------------
0x88
    Output sound
    input:
        ax -> Frequency (see COMMON.INC)
           -> = 0 for default beep (GIS2, 250ms)
    output:
        none
-------------------------------------------------
0x89
    Stop sound output
    intput:
        none
    output:
        none        
-------------------------------------------------






-------------------------------------------------
0x8e
    Performs a 32-bit mathematical operation
    input: 
        BP -> Operation 
            0: Addition
            1: Subtraction
            2: Equality Check
        DX:AX -> Number 1
        CX:BX -> Number 2
    output:
        DX:AX -> Result 
        BP -> Error 
            0x0000: No error
            0x0001: Overflow
            0xffff: Operation not specified
            For equality check:
                0b000: Not equal
                0b001: Equal
                0b010: DX:AX greater than CX:BX
                0b100: DX:AX smaller than CX:BX
-------------------------------------------------





-------------------------------------------------
0x90
    Put character to screen and advance cursor position
    input:
        AL -> character
    output:
        none
-------------------------------------------------
0x91
    Print string
    input:
        DS:SI -> 0 terminated string
    output:
        none
-------------------------------------------------
0x92
    Prints a null terminated string to a specific location
    input: 
        DS:SI -> 0 terminated string
        AH -> Y Coord
        AL -> X Coord
    output:
        none
-------------------------------------------------
0x93
    Switch the video mode
    input: 
        AL -> Video mode (0b0010001 : Textmode 40x25, 0b1000010 : Textmode 80x25, 0b1000010 : Videomode 320x200)
    output:
        none
-------------------------------------------------
0x94
    Put pixel
    input: 
        AL -> height
        BX -> width
        DL -> color
    output:
        none
--------------------------------------------------
0x95
    Clear entire screen
    input: 
        none
    output:
        none
--------------------------------------------------
0x96
    Get current video mode
    input: 
        none
    output:
        AL -> Video mode (0b0100010 : Textmode 80x25, 0b1000010 : Videomode 320x200)
-------------------------------------------------
0x97
    Print string with prefix
    input:
        AL -> Prefix code
            0: Info
            1: Warning
            2: Error
            4: Critical
        DS:SI -> 0 terminated string
    output:
        none
-------------------------------------------------
0x98
    Get current screen position 
    input:
        AH -> Flags
            0: Get position
            1: (GFX mode) get text cursor referenced to line and column number instead of pixel
    output:
        AL -> Video mode
        BX -> X-position
        DX -> Y-Position
-------------------------------------------------
0x99
    Set current screen position 
    input:
        AH -> Flags
            0: Get position
            1: (GFX mode) set text cursor referenced to line and column number instead of pixel
        BX -> X-position
        DX -> Y-Position
    output:
        none
-------------------------------------------------
0x9a
    Set color
    input:
        GFX mode: 
            ah -> bg color
            al -> fg color
        Text mode:
            al -> colorcode
                high nibble is bg
                low nibble if fg
    output:
        none
-------------------------------------------------




-------------------------------------------------
0xb0
    Get character from keyboard and put it to the screen
    input:
        AH -> 0xff for not putting the char to screen
    output:
        AL -> character
-------------------------------------------------
0xb1
    Read line from keyboard and write it to the screen
    Saves into es:di and adds 0 terminator at the end
    input:
        cx -> buffer length (including 1 terminator byte)
        es:di -> write buffer
    output:
        none:
-------------------------------------------------
0xb2
    Is function key pressed
    input:
        ah -> See FUNCCODE.INC constants
    output:
        al = 0x00: key not pressed
        al = 0x01: key pressed
        al = 0xff: key not in current keymap
-------------------------------------------------
0xb3
    Keyboard event registration
    Keyboard event handling code needs to exit with a retf instruction
    All registers (except stack) are restored after the keyboard event
    input:
        ah -> Flags
            (Modifiers)
            1 : Shift
            2 : Ctrl
            4 : Alt
            (Options)
          128 : de-register the event -> bx:dx is returned event handler
        al -> Scancode (extended scan codes are not supported!) (msb is 1 for event on key release instead of key down)
        bx:dx -> Target address (event handler)
    output:
        bx:dx -> Event handler (for deregistering the event)
-------------------------------------------------
0xb4
    Returns the scancode for an ascii character
    input:
        al -> ASCII character
    output:
        al -> Scancode 
        (0x00 if ascii character not in current keymap)
        (only works for non extended scan codes!)
-------------------------------------------------
0xb5
    Clear keyboard buffer
    input:
        none
    output:
        none
-------------------------------------------------
0xb8
    Allocate memory (in 16-byte units)
    input: 
        AX -> Number of bytes to reserve
    output:
        BX -> Segment
        DX -> Last nibble: offset (with 16 byte untis, should always be zero)
        BX = DX = 0xffff -> not enough memory
-------------------------------------------------
0xb9
    Free memory
    input: 
        AX -> Number of bytes to free
        BX -> Segment to free
        DX -> Offset to free
    output:
        none
-------------------------------------------------

-------------------------------------------------
0xc0
    Load file from current drive
    input:
        ds:si -> filename
        es:di -> read buffer
    output:
        carry flag set on error
-------------------------------------------------
0xc1
    Get file size
    input:
        ds:si -> filename
    output:
        ax -> file size in sectors (-1 if non existant)
        dx:bx -> file size in bytes (-1 if non existant)
-------------------------------------------------
0xc2
    Open (or create) file
    input: 
        ds:si -> filename
    output:
        bp:bx -> Address of file handle (-1 if not enough memory)
-------------------------------------------------
0xc3
    Close file
    input: 
        bp:bx -> Address of file handle
    output:
        none
-------------------------------------------------
0xc4
    Read next byte
    input: 
        bp:bx -> Address of file handle
    output:
        dl -> Read byte
        dh -> Error code
            0x00: no error
            0x01: end of file reached
            0x02: error while reading next sector
            0x80: unknown error
-------------------------------------------------
0xc5
    Read next string
    input: 
        bp:bx -> Address of file handle
        es:di -> Address to write the bytes to (zero terminated)
        ah -> function
            0: read string to zero termination
            1: read string to line break
        cx -> Max string length
    output:
        es:di -> Zero terminated string
        cx -> Zero, if no space left
        dh -> Error code
            0x00: no error
            0x01: end of file reached
-------------------------------------------------
0xc6
    Write next byte
    input: 
        bp:bx -> Address of file handle
        dl -> Byte to write
    output:
        none
-------------------------------------------------
0xc7
    Write next bytes
    input: 
        bp:bx -> Address of file handle
        cx -> Number of bytes to write
        ds:si -> Address to read the bytes from
    output:
        none
-------------------------------------------------
0xcf
    Feedback: disk operation
    input:
        none
    output:
        none
-------------------------------------------------

-------------------------------------------------
0xd0
    Get string length -> Number of chars to next terminator (terminator is not included in length)
    input:
        ds:si -> String for length detection
    output:
        ax -> Length of string
-------------------------------------------------
0xd1
    Initialize a string for a specified length and sets a terminator byte at the end
    input:
        es:di -> String to initialize
        al -> initialization byte
        cx -> length of string (one byte of this size is reserved for the terminator)
    output:
        es:di -> Initialized string
-------------------------------------------------
0xd2
    Checks if a string contains another string
    input:
        ah -> mode (flags)
            0 contains substring 
            1 are strings equal
            2 ignore case
        ds:si -> String to be checked
        es:di -> Check string
    output:
        carry flag -> Set if ds:si string does not contain es:di string, otherwise clear
        ax -> start of es:di string inside ds:si string (0 if not inside)
-------------------------------------------------
0xd3
    Copies a substring into another string
    input:
        ds:si -> source string to create a copy from
        bx -> relative start address
        dx -> relative end address 
    output:
        es:di -> target string buffer (will be 0 terminated, needs dx-bx + 1 bytes)
-------------------------------------------------
0xd4
    Splits a string on the occurence of a specific character
    First part of the string remains in ds:si (will be terminated), second part is split into es:di
    input: 
        ds:si -> String to split
        es:di -> Buffer to second part
        ah ->   0 Split with termination of first string 
                1 Split without termination of first string
                2 terminate second part
        al -> split character
        cx -> max split length
    output:
        es:di -> Buffer to second part
-------------------------------------------------
0xd5
    Removes all white space characters from a string (space, tab, cr and lf)
    input: 
        ah -> Mode
            1: Remove all whitespace characters
            2: Remove all multiple whitespace characters e.g. "   " -> " "
        ds:si -> string to remove white space characters from
    output:
        ds:si -> removed white space characters
        cx -> Number of white spaces removed
-------------------------------------------------
0xd6
    Replace characters in a null terminated string
    input:
        ds:si -> string to replace characters from
        dl -> Characters to replace
        dh -> Character to replace with
        cx -> max number of characters to replace
    output:
        none
-------------------------------------------------
0xd7
    Convert string case
    input:
        ah -> 0 to upper
              1 to lower
        ds:si -> string to convert
        cx -> convert a maximum of cx characters
    output:
        none
-------------------------------------------------

-------------------------------------------------
0xe0
    Converts a string to upper/lower case
    input:
        ah -> 0 convert to upper, not 0 convert to lower
        ds:si -> string to convert
    output:
        ds:si -> Converted string
-------------------------------------------------
0xe1
    Convert Cluster to LBA (Logical Block Address)
    input: 
        dx -> Cluster to convert
    output:
        dx -> LBA: (cluster - 2) * sectors per cluster (LBA)
-------------------------------------------------
0xe2
    Convert LBA to CHS (Cylinder Head Sector)
    input: 
        dx -> LBA Address to convert
    output:
        cl -> Sector: (logical sector / sectors per track) + 1
        dh -> Head: (logical sector / sectors per track) MOD number of heads
        ch -> Track: logical sector / (sectors per track * number of heads)
-------------------------------------------------
0xe3
    Convert a 16-bit string representation of a bin/hex/decimal
    unsigned integer to an unsigned integer
    input:
        ds:si -> string representation of 16-bit unsigned int
    output:
        ax -> resulting integer
        carry -> set on error
-------------------------------------------------
0xe4
    Converts a number into printable hex format
    input:
        DL -> Number to transform to printable hex
    output:
        DX -> resulting printable ascii integer
-------------------------------------------------

-------------------------------------------------
0xf0
    Starts the machine language terminal
    Address returns the containing value
    Address-Address returns the containing values
    Address: value sets the value of address to value
    Address: value value value ... sets the values of addresses to values
    AddressR Sets execution to specified address
    input: 
        none
    output:
        none
-------------------------------------------------
0xf1
    Color Test
    input:
        none
    output: 
        none
-------------------------------------------------
0xf2
    Call COM program
    COM programs need to exit with a ret instruction
    All registers are restored after the COM return
    input:
        DS:SI -> Filename of COM program
        ES:DI -> Command line arguments as string
    output:
        AX -> Error code
            0x00: No error
            0x01: File not found
            0x02: Not enough RAM
            0x04: File to large
-------------------------------------------------
0xf3
    Execute COSIC Line
    intput:
        DH -> mode
            0: direct mode (variable names are cloned)
            1: sourcecode mode (variable names are read from source code)
        DS:SI -> Line of COSIC Code
    output:
        AL -> Error code
        AH -> Column number
-------------------------------------------------
0xf4
    Get random number (byte)
    input:
        none
    output:
        AL -> Random number
-------------------------------------------------
0xff
    Software
    input: 
        ?
    output:
        ?
-------------------------------------------------