-------------------------------------------------
# TONY ToDo List
-------------------------------------------------

[x] Keyboard - Map Dateien erstellen -> Sind Größenbegrenzt (z.B. 2kb) und enhalten Informationen und Tabellen zur Verarbeitung von Scan Codes -> Struktur überlegen (default DE)
[x] Keyboard getch 
[x] und readln
[x] Keyboard auf extended scan codes reagieren -> Tabelle erweitern
[x] Keyboard .check_key_modifier auf interrupt umstellen -> Suche in Keymap nach Funktionstasten -> Nach Funktionstastencode -> nach Scancode (erweitert? => OFFSET!) in Keystate table und erstelle interrupt zur Abfrage von Sondertasten (mit Funktionen ah=0 al = ESC - DRUCK, ah=1 al = EINFG - BILD Runter) -> setze oder lösche carry und ersetzte .check_special_keys aktuell mit  Aufruf und carry Prüfung 
[x] Keyboard vor .check_key_modifier prüfen, ob Funktionstaste, falls ja verlassen, da im folgenden nur noch ASCII Umwandlung stattfindet
[x] Kernel Config Reader
    [x] Lesen von Keyboard Map und entsprechend laden (an bestimmte Stelle in Keyboard Driver laden)
[x] Memory Map anlegen -> 0x000000 - 0x07ffff (8 Segmente) programmierbar (524288B = 512kB) -> Map in Kernel mit 4kB, jedes Bit gibt an, ob 16 Byte im Bereich 0x00000-0x07ffff frei sind -> Speicher in 16 Byte große Einheiten zerlegt (kleinst möglich)
    [x] Interrupt nimmt Anzahl benötigter Bytes entgegen, und gibt Pointer zurück
    [x] Delete Interrupt nimmt Anzahl benötigter Bytes und Pointer entgegen 
[x] Kernel Config Reader
    [x] Lesen von Shell Datei und entsprechend in freien Speicher laden und ausführen 
[x] Berechnungen und Vergleiche für 32-Bit Zahlen
[x] String to int
[x] int to String
[x] Ausführung von COM Dateien Interrupt einbauen
    Dateigröße reservieren
    Listenelement hinzufügen (Erstes Listenelement in Variable speichern)
        Listenelementgröße: 16 Byte
        Segment + Offset von Filehandle des aufzurufenden Programms
        Segment + Offset von Stack vor dem Aufruf des Unterprogramms
        Segment + Offset des nächsten Listenelements (0xfffff), falls Ende der Liste
    Interrupt zum Beenden an Offset 0 schreiben
    PSP füllen
    DS und ES auf Offset anpassen
    word 0 auf Stack schreiben -> Beim RET wird zu Offset 0 gesprungen -> Verlassen interrupt
    Hardware Interrupts aktivieren (sti), damit diese während der Ausführung von Programmen aufgerufen werden
    Sprung an Offset 0x100
    Kein Iret, COM werden mit Verlassen interrupt verlassen -> Kommentar schreiben
[x] Verlassen Interrupt für Unterprozess
    Taskliste ab erstem Element durchlaufen, bis Segment + Offset des Files des aufgerufenen Programms mit CS und IP aus dem Stack übereinstimmen
        Speicher von Datei freigeben -> Dazu COM aus Listenelement suchen + 0x100 für psp und deallokieren
        Listenelement ausketten -> bei letztem Listenelement Vars auf 0 setzen
        Stack aus Segment und Offset aus Listenelement wieder herstellen
        Listenelementspeicher freigeben
    Iret kehrt zum Aufruf von Interrupt zur Ausführung von COM zurück, da dort kein Iret ausgeführt wird
[x] Warnung ausgeben, wenn Datei aus Kernel cfg nicht gefunden -> ggf. kein Grafikmodus starten 
Bei Fehlender Keyboard Datei halten
[x] Keyboard default lesen -> Laden von Config überspringen bei F7
[x] Config Kommentar mit ;
[x] Zahlen lesen -> ascii, ascii hex, ascii bin
[x] Fehler korrigeren -> MLT einbinden -> Lesen beim Bootloader schlägt fehl -> Eintrag FAT kaputt? => Bootloader wurde überschrieben
[x] String terminate at byte interrupt
[x] Display Farbe in Config
[x] String equals ignore case
[x] Zufallsgenerator (Zahlen zwischen 1 und 0xffff)
[x] Eventanmeldung für Keyboard
    [x] Orakel mit F12 -> Ja/Nein
[ ] File open interrupt gibt file zurück mit Adresse, Anfangsposition fat, aktuelles Cluster der Datei im Speicher ; mit file read line interrupt bis eof durch Datei lesen ; mit write Schreiben und mit close Speicher freigeben 
    [x] Lesen
    [ ] Schreiben
[x] Jump to reset vector am Kernelende
[x] MLT (Machine Monitor) vgl. Apple 2 -> lesen (Zahl eingeben) von N Byte (zahl1-zahl2), schreiben von N Byte (addr zahl: zahl1 zahl2...), ausführen an bestimmter Stelle (zahlR/zahlG)
    [x] Automatisch am Kernelende aufrufen
    [ ] Aufruf über Strg+Alt+Entf
    [x] Verlassen über ESC für 3 Sekunden gerdückt halten
        [x] Dauerschleife -> Check ob ESC gehalten, wenn nicht Schleife verlassen, nicht beenden, wenn ja -> 3 Sekunden Timer runter zählen und checken ob esc weiter gehalten
[ ] Eventanmeldung für Timer
[ ] Mausinterrupts bc - bf -> Position lesen (Tasten + Posi), setzen (Posi), Hinzufügen / entfernen von Aufruf  einer Funktion bei bestimmtem Event, Einstellungen (Cursor aktivieren/deaktivieren, Cursor anzeigen/ausblenden, Geschwindigkeit, etc.)
[ ] Keyboard Capslock und numlock (inkl. leds)
[ ] Interrupt exceptions umprogrammieren -> Fehlermeldung geben / aktuelles Programm beenden
    Ab Interrupt exception 8 (auch hardware interrupt) im pic prüfen, ob hardware interrupt, falls nicht exception
[ ] Ggf. stack memory senken
[x] Sound interrupts
[ ] Music queue interrupt
[x] Beep on full keyboard buffer


[x] Fallout Hacking Login Game -> Über Shellparameter von Shell nachladbar
    [x] Animation -> Time based -> -auto
    [x] Animation -> Upon key stroke -> -keystroke
    [x] Animation -> Real text intput-> -match
    [x] Ton
    [x] Höhere Level
    [x] Auf Shell Übergabe reagieren
    [x] Auf aktivierten Video Mode prüfen und entsprechend arbeiten
    [x] fast mode
    [x] variablen für display_fill funktion bereitstellen und dann nur eine funktion
[ ] Shell: Hat eine path variable -> in allen paths wird nach Programmen zur Ausführung gesucht
    [ ] Begrenzter Befehlssatz: dir, cd, cls, color, exit, path, set path
    [ ] Rest über Programme



[ ] COSIC eigenes Programm

[ ] Testfälle addieren:
    [ ] literal, literal
        [ ] zahlen gleich viele zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 1 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 2 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
    [ ] literal, var
        [ ] zahlen gleich viele zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 1 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 2 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
    [ ] var, literal
        [ ] zahlen gleich viele zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 1 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 2 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
    [ ] var, var
        [ ] zahlen gleich viele zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 1 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
        [ ] zahl 2 mehr zeichen
            [ ] positiv, positiv
            [ ] positiv, negativ
            [ ] negativ, positiv
            [ ] negativ, negativ
[ ] Interpretierte Sprache (COBOL + BASIC = COSIC)
    Befehlssatz:
        ; Kommentar
        add <var> to <var> (giving <var>/display) ; display gibt Ergebnis aus
        sub <var> from <var> (giving <var>/display) ; display gibt Ergebnis aus
        multiply <var> by <var> (giving <var>/display) ; display gibt Ergebnis aus
        divide <var> by <var> (giving <var>/display) ; display gibt Ergebnis aus
        move <var> to <var>
        cast $<var> to %<var> (giving %<var>) ; str2int -> giving %<var> gibt Status an
        delete <var> ; deallokiert den durch <var> belegten speicher
        <label> (param <var>( <var>))
        call <label/pointer> (param <var>( <var>)) (accept <var>) ; accept ist für Rückgabe ; Pointer nur ohne Übergabe und Rückgabe
        goto <label/pointer> ; Goto label nur ohne Übergabe
        return <var> ; von call -> Schreibt var in Speicherbereich und gibt adresse zurück, falls akzeptiert wird, wird die Variable in var des Aufrufes geschrieben, ansonsten verworfen
        if <bool expr> then (multiline)
        elseif <bool expr> then (multiline)
        else
        end
        while <bool expr> do
        end
        for %<var> to <number> (step <number>)
        end
        display <string/number> (+ <string/number> ...) (crlf)
        input $/%<var> (<string>)
        waitkey <keycode>
        random to %<var> ; Bestimmt die größe von var und füllt jede zulässige stelle mit zufallswerten
        append <var> to $<var>
        fopen <handle> with <string>
        fclose <handle>
        fget <handle> (to <var> -> skip 1 byte)
        fput <var> to <handle>
        fread <handle> for %<var> (to <var> -> skip %var bytes)
        fwrite <var> to <handle>
        read <pointer> for %<var> to <var>
        write <var> to <pointer>
        locate <pointer> to %<var> ; Setzt den Pointer auf die Speicheradresse var
        assign <pointer> to <var> ; Setzt var auf den Inhalt von <pointer>
        execute $<var> (param <var>( <var>)) ; Führt das Programm $var mit Parameter var aus
        exit ; Programm
        #include zeichenkette

        <keycode>: FUNC_KEY_CODES und KEYBOARD_MAP
        <label>: :zeichenkette
        <handle>: ~zeichenkette
        <pointer>: *zeichenkette
        <const>: Stringliteral / Ziffernliteral
        <string>: "abc" / $<var>
        <number>: 123 / %<var>    :    im BCD Format
        (bei intialisieren von Variablen)
        <var>: $str size <zeichen> ODER assign <string>
        <var>: %no size <ziffern> ODER assign <number>
        <bool expr>: <bool op> <var/const> <op> <var/const> (<bool op> ...)
        <op>: ==, >, <, >=, <=
        <bool op> -> not, or, and, xor, nand, nor, xnor

        Listen anlegen für labels, handles, $vars und %vars
        $vars werden mit ihrer Länge, nicht über 0 terminiert
        (multiline) werden mit terminator (do/then) abgeschlossen
            -> In Interpreter wird Befehl entgegengenommen, bis zu terminator
            -> In Interpreter

